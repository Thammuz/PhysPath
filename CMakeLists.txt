cmake_minimum_required(VERSION 3.18)
project(PhysPath LANGUAGES CXX CUDA)

# ?????????????????????????????????????????????????????????????????????????????
# 0. Compiler / global switches
# ?????????????????????????????????????????????????????????????????????????????
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Windows’ <windows.h> defines min/max macros that break OptiX & Imath.
add_compile_definitions(NOMINMAX)

if(MSVC)
    # Multi?process compilation for faster builds
    add_compile_options(/MP)
endif()

# ?????????????????????????????????????????????????????????????????????????????
# 1. Core dependencies (all delivered by vcpkg)
# ?????????????????????????????????????????????????????????????????????????????
find_package(CUDAToolkit REQUIRED)
find_package(OpenEXR     REQUIRED CONFIG)   # -> OpenEXR::OpenEXR

# OptiX headers – the SDK is **header?only** for host code; no linking needed.
find_path(OPTIX_INCLUDE_DIR optix.h
          HINTS "$ENV{OPTIX_SDK_HOME}/include" "$ENV{OPTIX_SDK_ROOT}/include")

# ?????????????????????????????????????????????????????????????????????????????
# 2. Pixar USD (pxr)
#    The current vcpkg port does not export CMake targets, so we roll our own
#    light?weight IMPORTED target set.  All we really need are include paths
#    and the list of import?libs (.lib) for the chosen build?type.
# ?????????????????????????????????????????????????????????????????????????????
set(pxr_FOUND FALSE)

if(DEFINED ENV{VCPKG_ROOT})
    # Guess the active triplet if the user did not pass one explicitly.
    if(NOT DEFINED VCPKG_TARGET_TRIPLET)
        if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
            set(VCPKG_TARGET_TRIPLET x64-windows)
        else()
            set(VCPKG_TARGET_TRIPLET x64-linux)
        endif()
    endif()

    set(_pxr_root "$ENV{VCPKG_ROOT}/installed/${VCPKG_TARGET_TRIPLET}")
    if(EXISTS "${_pxr_root}/include/pxr/pxr.h")
        set(pxr_FOUND TRUE)
        set(PXR_INCLUDE_DIR "${_pxr_root}/include")

        # Core libs in the link order MSVC & lld expect
        set(_pxr_components
            usd_usd  usd_usdGeom  usd_usdLux
            usd_tf   usd_ar       usd_vt
            usd_sdf  usd_gf       usd_pcp)

        # Pick the correct suffix for each build configuration
        set(PXR_LIBS "")
        foreach(lib IN LISTS _pxr_components)
            list(APPEND PXR_LIBS
                 "$<IF:$<CONFIG:Debug>,${lib}_d,${lib}>")
        endforeach()

        message(STATUS "USD headers found in ${_pxr_root}")
    endif()
endif()

if(pxr_FOUND)
    add_library(pxr_libs INTERFACE)
    target_include_directories(pxr_libs INTERFACE "${PXR_INCLUDE_DIR}")

    # vcpkg usually puts import?libs into <triplet>/lib and <triplet>/debug/lib
    # but the current usd port drops them next to the DLLs in */bin.  Cover all
    # of these locations so the linker can always find what it needs.
    target_link_directories(pxr_libs  INTERFACE
        "$ENV{VCPKG_ROOT}/installed/${VCPKG_TARGET_TRIPLET}/lib"
        "$ENV{VCPKG_ROOT}/installed/${VCPKG_TARGET_TRIPLET}/bin"
        "$ENV{VCPKG_ROOT}/installed/${VCPKG_TARGET_TRIPLET}/debug/lib"
        "$ENV{VCPKG_ROOT}/installed/${VCPKG_TARGET_TRIPLET}/debug/bin")

    target_link_libraries  (pxr_libs  INTERFACE ${PXR_LIBS})
else()
    message(WARNING "USD NOT found – building without usd_loader and USD support")
endif()

# ?????????????????????????????????????????????????????????????????????????????
# 3. Common include paths (host?side only)
# ?????????????????????????????????????????????????????????????????????????????
include_directories(
    ${CUDAToolkit_INCLUDE_DIRS}
    ${OPTIX_INCLUDE_DIR}
    src)  # local headers

# ?????????????????????????????????????????????????????????????????????????????
# 4. GPU demo – writes an RGB gradient to an EXR (OptiX not yet required)
# ?????????????????????????????????????????????????????????????????????????????
add_executable(pp_gpu_rgb src/gpu_main.cpp)

target_link_libraries(pp_gpu_rgb PRIVATE CUDA::cuda_driver OpenEXR::OpenEXR)
if(pxr_FOUND)
    target_link_libraries(pp_gpu_rgb PRIVATE pxr_libs)
endif()

install(TARGETS pp_gpu_rgb RUNTIME DESTINATION bin)

# ?????????????????????????????????????????????????????????????????????????????
# 5. usd_loader utility – dumps meshes found in a USD stage
# ?????????????????????????????????????????????????????????????????????????????
if(pxr_FOUND)
    add_executable(usd_loader src/usd_loader.cpp)
    target_link_libraries(usd_loader PRIVATE pxr_libs)
    install(TARGETS usd_loader RUNTIME DESTINATION bin)
endif()
